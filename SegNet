import torch.nn as nn
import torch, torch.nn.functional as F
import torchvision.models as models

import time


class Encoder(nn.Module):
    def __init__(self):
        super(Encoder, self).__init__()
        vgg = models.vgg16_bn()

        self.Encoder_Block1 = vgg.features[0:6]
        self.Encoder_Block2 = vgg.features[7:13]
        self.Encoder_Block3 = vgg.features[14:23]
        self.Encoder_Block4 = vgg.features[24:33]
        self.Encoder_Block5 = vgg.features[34:43]
        self.pool = nn.MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False, return_indices=True)

    def forward(self, x):
        x = self.Encoder_Block1(x)
        x, ind1 = self.pool(x)

        x = self.Encoder_Block2(x)
        x, ind2 = self.pool(x)

        x = self.Encoder_Block3(x)
        x, ind3 = self.pool(x)

        x = self.Encoder_Block4(x)
        x, ind4 = self.pool(x)

        out = self.Encoder_Block5(x)

        return out, ind1, ind1, ind2, ind3, ind4


class Decoder(nn.Module):
    def __init__(self):
        super(Decoder, self).__init__()
        vgg = models.vgg16_bn()
        print(vgg)
        self.Decoder_Block1 = vgg.features[0:6]
        self.Decoder_Block2 = vgg.features[7:13]
        self.Decoder_Block3 = vgg.features[14:23]
        self.Decoder_Block4 = vgg.features[24:33]
        self.Decoder_Block5 = vgg.features[34:43]
        self.unpool = nn.MaxUnpool2d(kernel_size=2, stride=2, padding=0)
        self.final = nn.Conv2d(10, 29, kernel_size=1, stride=1)

    def forward(self, x, ind1, ind2, ind3, ind4):
        x = self.Decoder_Block5(x)

        x = self.unpool(x, ind4)
        x = self.Decoder_Block4(x)

        x = self.unpool(x, ind3)
        x = self.Decoder_Block3(x)

        x = self.unpool(x, ind2)
        x = self.Decoder_Block2(x)

        x = self.unpool(x, ind1)
        x = self.Decoder_Block1(x)
        print(x.size())

        out = self.final(x)

        return out


class Segnet(nn.Module):
    def __init__(self):
        super(SegNet, self).__init__()
        self.name = "SegNet " + time.asctime()
        self.encoder = Encoder()
        self.decoder = Decoder()

    def forward(self, x):
        feature = self.encoder(x)
        out = self.decoder(feature)
        return out
